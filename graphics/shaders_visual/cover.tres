[gd_resource type="VisualShader" load_steps=20 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=3]
source = 2

[sub_resource type="VisualShaderNodeVectorOp" id=4]
operator = 2

[sub_resource type="VisualShaderNodeVectorInterp" id=5]

[sub_resource type="VisualShaderNodeTexture" id=6]
source = 1

[sub_resource type="VisualShaderNodeVectorCompose" id=7]

[sub_resource type="VisualShaderNodeScalarUniform" id=8]
uniform_name = "Saturation"

[sub_resource type="VisualShaderNodeScalarUniform" id=9]
uniform_name = "Contrast"

[sub_resource type="VisualShaderNodeScalarConstant" id=10]
constant = 0.5

[sub_resource type="VisualShaderNodeVectorOp" id=11]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0.5 ) ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=12]
operator = 6

[sub_resource type="VisualShaderNodeVectorOp" id=13]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=14]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0.5 ) ]

[sub_resource type="VisualShaderNodeScalarUniform" id=15]
uniform_name = "Brightness"

[sub_resource type="VisualShaderNodeVectorOp" id=16]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=17]
uniform_name = "Blur"

[sub_resource type="VisualShaderNodeDotProduct" id=18]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ) ]

[sub_resource type="VisualShaderNodeColorUniform" id=19]
uniform_name = "BlendColor"

[resource]
code = "shader_type canvas_item;
render_mode unshaded;

uniform vec4 BlendColor : hint_color;
uniform float Blur;
uniform float Saturation;
uniform float Contrast;
uniform float Brightness;



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:48
	vec3 n_out48p0 = BlendColor.rgb;
	float n_out48p1 = BlendColor.a;

// Input:20
	vec3 n_out20p0 = vec3(SCREEN_UV, 0.0);

// ScalarUniform:46
	float n_out46p0 = Blur;

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = textureLod(SCREEN_TEXTURE, n_out20p0.xy, n_out46p0);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// VectorOp:25
	vec3 n_out25p0 = n_out48p0 * n_out3p0;

// DotProduct:47
	vec3 n_in47p1 = vec3(1.00000, 1.00000, 1.00000);
	float n_out47p0 = dot(n_out25p0, n_in47p1);

// VectorCompose:31
	vec3 n_out31p0 = vec3(n_out47p0, n_out47p0, n_out47p0);

// ScalarUniform:33
	float n_out33p0 = Saturation;

// VectorMix:28
	vec3 n_out28p0 = mix(n_out31p0, n_out3p0, vec3(n_out33p0));

// Scalar:38
	float n_out38p0 = 0.500000;

// VectorOp:39
	vec3 n_out39p0 = n_out28p0 - vec3(n_out38p0);

// ScalarUniform:34
	float n_out34p0 = Contrast;

// ScalarOp:41
	float n_in41p1 = 0.00000;
	float n_out41p0 = max(n_out34p0, n_in41p1);

// VectorOp:42
	vec3 n_out42p0 = n_out39p0 * vec3(n_out41p0);

// VectorOp:43
	vec3 n_out43p0 = n_out42p0 + vec3(n_out38p0);

// ScalarUniform:44
	float n_out44p0 = Brightness;

// VectorOp:45
	vec3 n_out45p0 = n_out43p0 * vec3(n_out44p0);

// Input:21
	vec3 n_out21p0 = vec3(UV, 0.0);

// Texture:22
	vec3 n_out22p0;
	float n_out22p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out21p0.xy);
		n_out22p0 = _tex_read.rgb;
		n_out22p1 = _tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out45p0;
	COLOR.a = n_out22p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1844.37, -198.333 )
mode = 1
flags/light_only = false
flags/unshaded = true
nodes/fragment/0/position = Vector2( 920, 620 )
nodes/fragment/3/node = SubResource( 6 )
nodes/fragment/3/position = Vector2( -2120, 220 )
nodes/fragment/20/node = SubResource( 1 )
nodes/fragment/20/position = Vector2( -2460, 200 )
nodes/fragment/21/node = SubResource( 2 )
nodes/fragment/21/position = Vector2( 60, 660 )
nodes/fragment/22/node = SubResource( 3 )
nodes/fragment/22/position = Vector2( 400, 580 )
nodes/fragment/25/node = SubResource( 4 )
nodes/fragment/25/position = Vector2( -1820, 0 )
nodes/fragment/28/node = SubResource( 5 )
nodes/fragment/28/position = Vector2( -880, 220 )
nodes/fragment/31/node = SubResource( 7 )
nodes/fragment/31/position = Vector2( -1220, 0 )
nodes/fragment/33/node = SubResource( 8 )
nodes/fragment/33/position = Vector2( -1220, 520 )
nodes/fragment/34/node = SubResource( 9 )
nodes/fragment/34/position = Vector2( -1220, 700 )
nodes/fragment/38/node = SubResource( 10 )
nodes/fragment/38/position = Vector2( -880, 520 )
nodes/fragment/39/node = SubResource( 11 )
nodes/fragment/39/position = Vector2( -500, 0 )
nodes/fragment/41/node = SubResource( 12 )
nodes/fragment/41/position = Vector2( -480, 660 )
nodes/fragment/42/node = SubResource( 13 )
nodes/fragment/42/position = Vector2( -120, 0 )
nodes/fragment/43/node = SubResource( 14 )
nodes/fragment/43/position = Vector2( 260, 0 )
nodes/fragment/44/node = SubResource( 15 )
nodes/fragment/44/position = Vector2( 60, 420 )
nodes/fragment/45/node = SubResource( 16 )
nodes/fragment/45/position = Vector2( 600, 280 )
nodes/fragment/46/node = SubResource( 17 )
nodes/fragment/46/position = Vector2( -2460, 360 )
nodes/fragment/47/node = SubResource( 18 )
nodes/fragment/47/position = Vector2( -1540, 40 )
nodes/fragment/48/node = SubResource( 19 )
nodes/fragment/48/position = Vector2( -2120, -80 )
nodes/fragment/connections = PoolIntArray( 20, 0, 3, 0, 22, 1, 0, 1, 3, 0, 25, 1, 21, 0, 22, 0, 33, 0, 28, 2, 28, 0, 39, 0, 39, 0, 42, 0, 41, 0, 42, 1, 42, 0, 43, 0, 44, 0, 45, 1, 43, 0, 45, 0, 45, 0, 0, 0, 46, 0, 3, 1, 38, 0, 39, 1, 38, 0, 43, 1, 34, 0, 41, 0, 31, 0, 28, 0, 3, 0, 28, 1, 25, 0, 47, 0, 47, 0, 31, 0, 47, 0, 31, 1, 47, 0, 31, 2, 48, 0, 25, 0 )
